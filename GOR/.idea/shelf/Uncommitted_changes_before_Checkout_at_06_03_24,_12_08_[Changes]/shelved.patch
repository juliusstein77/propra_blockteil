Index: src/SearchWindow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/SearchWindow.java b/src/SearchWindow.java
--- a/src/SearchWindow.java	
+++ b/src/SearchWindow.java	
@@ -254,7 +254,7 @@
                        }
                     }
                     // sum values into scoresPerSeq
-                    double scoreToPutIntoSum = Math.log((1.0 * valueInMatrix / notSec * 1.0 * totalNotSec / totalSec));
+                    double scoreToPutIntoSum = Math.log(1.0 * valueInMatrix / notSec * totalNotSec / totalSec);
                     scoresPerSeq.put(secType, scoresPerSeq.get(secType) + scoreToPutIntoSum);
                 }
             }
@@ -272,54 +272,4 @@
     public String cutSubsequence(String aaSequence, int windowMid) {
         return aaSequence.substring(windowMid - this.getWINDOWSIZE() / 2, windowMid + 1 + this.getWINDOWSIZE() / 2);
     }
-    /*
-    Loop over all 3 matrices; for each amino acid in search window:
-    Get all values needed for Value calculation (f_sec, f_!sec, f_secType and f_!secType)
-    Then sum up the value for each Amino Acid in a search window, then normalize them to the SecondaryCounts-HashMap
-     */
-    public void addSecondaryCounts(String aaSubSeq, HashMap<Character,Integer> totalOcc, HashMap<Character, Double> AASecondaryCounts){
-        for (Character secType : this.secStructMatrices.keySet()) {
-            int sec = 0; // f secType|a
-            double normalizedValue = 0;
-            int notSec = 0; // f_!secType|a
-            for (int index = 0; index < aaSubSeq.length(); index++) {
-                // check if we have counts for the curr AA in the window
-                char currAA = aaSubSeq.charAt(index);
-                int totalSec = totalOcc.get(secType); // f_s
-                int totalNotSec = 0; // f_!s
-
-                if (this.AA_TO_INDEX.containsKey(currAA)) {
-                    int aaIndex = AA_TO_INDEX.get(currAA);
-                    int[][] secStructMatrix = secStructMatrices.get(secType);
-                    sec = secStructMatrix[aaIndex][index];
-
-                    for (Character notSecType : secStructMatrices.keySet()) {
-                        if (!notSecType.equals(secType)) {
-                            notSec += secStructMatrices.get(notSecType)[aaIndex][index];
-                            totalNotSec += totalOcc.get(notSecType);
-                        }
-                    }
-                    normalizedValue += Math.log(1.0 * sec / notSec) + (Math.log(1.0 * totalNotSec/ totalSec));
-                }
-            }
-            AASecondaryCounts.put(secType, normalizedValue);
-        }
-    }
-
-    /*
-    Extend Secondary-Structure Sequence by the Score of addSecondaryCounts-Method
-     */
-    public void extendSecondarySequence(HashMap<Character, Double> AASecondaryCounts, Sequence sequence){
-        double scoreH = AASecondaryCounts.get('H');
-        double scoreC = AASecondaryCounts.get('C');
-        double scoreE = AASecondaryCounts.get('E');
-
-        if(scoreH >= scoreC && scoreH >= scoreE) {
-            sequence.extendSecStruct('H');
-        } else if (scoreC >= scoreH && scoreC >= scoreE) {
-            sequence.extendSecStruct('C');
-        } else {
-            sequence.extendSecStruct('E');
-        }
-    }
 }
\ No newline at end of file
